#+title: Config
#+created:  July 9, 2025
#+STARTUP: content

* Set lexical-binding
I have no idea what this does
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Don't edit this file, this is generated by config.org
#+end_src


* Documentation
** Identity
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp :tangle no
(setq user-full-name "John Doe"
       user-mail-address "john@doe.com")
#+end_src

** Configuring Doom
*** Packages
Whenever you reconfigure a package, make sure to wrap your config in an
~after!~ block, otherwise Doom's defaults may override your settings. E.g.

#+begin_src emacs-lisp :tangle no
(after! PACKAGE
  (setq x y))
#+end_src

The exceptions to this rule:

- Setting file/directory variables (like ~org-directory~)
- Setting variables which explicitly tell you to set them before their
  package is loaded (see ~C-h v VARIABLE~ to look up their documentation).
- Setting doom variables (which start with ~doom-~ or ~+~).
*** Functions and Macros
Here are some additional functions/macros that will help you configure Doom.

- ~load!~ for loading external *.el files relative to this one
- ~use-package!~ for configuring packages
- ~after!~ for running code after a package has loaded
- ~add-load-path!~ for adding directories to the ~load-path~, relative to
  this file. Emacs searches the `load-path' when you load packages with
  ~require~ or ~use-package~.
- ~map!~ for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press ~K~ (non-evil users must press ~C-c c k~).
This will open documentation for it, including demos of how they are used.
Alternatively, use ~C-h o~ to look up a symbol (functions, variables, faces,
etc).

You can also try ~gd~ (or ~C-c c d~) to jump to their definition and see how
they are implemented.


* Configurations
** Appearance
*** Themes
There are two ways to load a theme. Both assume the theme is installed and
available. You can either set ~doom-theme~ or manually load a theme with the
~load-theme~ function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'doom-one)
#+end_src

*** Line Numbering
This determines the style of line numbers in effect. If set to ~nil~, line
numbers are disabled. For relative line numbers, set this to ~relative~.

#+begin_src emacs-lisp
(setq display-line-numbers-type `relative)
#+end_src

*** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

  - ~doom-font~ -- the primary font to use
  - ~doom-variable-pitch-font~ -- a non-monospace font (where applicable)
  - ~doom-big-font~ -- used for ~doom-big-font-mode~; use this for
    presentations or streaming.
  - ~doom-symbol-font~ -- for symbols
  - ~doom-serif-font~ -- for the ~fixed-pitch-serif~ face

    See 'C-h v ~doom-font~ for documentation and more examples of what they
    accept. For example:

  #+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
  #+end_src

  If you or Emacs can't find your font, use ~M-x describe-font~ to look them
  up, ~M-x eval-region~ to execute elisp code, and ~M-x doom/reload-font~ to
  refresh your font settings. If Emacs still can't find your font, it likely
  wasn't installed correctly. Font issues are rarely Doom issues!

*** Registers
Display the registers on ~"~ and other similar commands.
#+begin_src emacs-lisp
(use-package evil-owl
  :diminish ""
  :config
  (setq evil-owl-idle-delay 0.3)
  (setq evil-owl-max-string-length 500)
  (add-to-list 'display-buffer-alist
               '("*evil-owl*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (window-height . 20)))
  (evil-owl-mode))
#+end_src

*** Prettify Symbols
Prettify symbols by default, there is a list that can be appended to, to add symbols.
#+begin_src  emacs-lisp
(global-prettify-symbols-mode)
#+end_src

*** Which Key
Set which-key delay
#+begin_src emacs-lisp
(setq which-key-idle-delay 0.2)
(setq which-key-idle-secondary-delay 0.1)
#+end_src
*** Transparency
#+begin_src emacs-lisp :tangle yes
(add-to-list 'default-frame-alist '(alpha-background . 95))
#+end_src
This is to set everything else to slightly transparent too (I think).
#+begin_src emacs-lisp :tangle no
(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src
*** To Do highlighting
#+begin_src emacs-lisp :tangle yes
(global-hl-todo-mode 1)
#+end_src
** Org
*** Appearance
org modern mode hides some things and prettifies org mode.
#+begin_src emacs-lisp :tangle yes
(after! org
  (global-org-modern-mode))

(setq!
 org-hide-emphasis-markers t
 org-modern-star 'replace)  ;; hides *bold* / /italic/ markers
#+end_src
*** Location
If you use ~org~ and don't want your org files in the default location below,
change ~org-directory~. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/org/")
#+end_src
** Programming
*** Ocaml
**** Tuareg
Remove ~opam-switch-mode~ to prevent errors when not using Opam.
#+begin_src emacs-lisp
(remove-hook 'tuareg-mode-local-vars-hook #'opam-switch-mode)
#+end_src
**** Eglot

Enable the ~ocaml-eglot~ package.
#+begin_src emacs-lisp
(use-package ocaml-eglot
  :after tuareg
  :hook
  (tuareg-mode . ocaml-eglot)
  (ocaml-eglot . eglot-ensure)
  (ocaml-eglot . (lambda () (add-hook #'before-save-hook #'eglot-format nil t))))
#+end_src

Configure ~Ocamllsp~ settings.
#+begin_src emacs-lisp
(after! eglot
  (add-to-list 'eglot-server-programs
               '(tuareg-mode . ("ocamllsp")))
  (setq-default eglot-workspace-configuration
                '(:ocamllsp (:codelens t :inlayHints (:hintPatternVariables t :hintLetBindings t :hintFunctionParams t)))
                ))
#+end_src

*** Nix
**** Lsps
Enable both ~nil~ and ~nixd~ language servers. For nixd adding ~:add-on?~ allowed for running in parallel to nil.
TODO: This lsp setup for nix is breaking everything
#+begin_src emacs-lisp :tangle no
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "nil")
                    :activation-fn (lsp-activate-on "nix")
                    :priority 1
                    :multi-root t
                    :server-id 'nil-ls
                    :synchronize-sections nil)) ; Disable sync sections

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "nixd")
                    :activation-fn (lsp-activate-on "nix")
                    :priority 0
                    :multi-root t
                    :add-on? t
                    :server-id 'nixd-lsp)))

#+end_src
******* Enable allow nixd + nil
nixd isn't in the ~lsp-client-packages~ list so it is ignored, this is set to nil so that all lsps are allowed.
#+begin_src emacs-lisp :tangle no
(add-hook 'nix-mode-hook
  (lambda ()
    ;; Allow manually registered LSP clients to load
    (setq-local lsp-client-packages nil)))
#+end_src
**** Enable inlay hints
#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (defun my/enable-nixd-inlay-hints ()
    (when (eq (lsp--client-server-id (lsp--workspace-client lsp--cur-workspace))
              'nixd-lsp)
      (setq-local lsp-inlay-hint-enable t)
      (lsp-inlay-hints-mode 1)))

  (add-hook 'lsp-after-initialize-hook #'my/enable-nixd-inlay-hints))
#+end_src
** Key Bindings
*** Evil escape
#+begin_src emacs-lisp :tangle yes
(after! evil
  (setq evil-escape-key-sequence "jk")
  (setq evil-escape-delay 0.1))
#+end_src
*** Dirvish
#+begin_src emacs-lisp :tangle yes
(map! :n "-" 'dirvish)
(map! :leader :n "-" 'dirvish-quick-access)
#+end_src
**** Quick access entries
#+begin_src emacs-lisp :tangle yes
(after! dirvish
  (setq! dirvish-quick-access-entries
         `(("h" "~/"                   "Home")
           ("e" ,user-emacs-directory  "Emacs user directory")
           ("p" "~/playground/"        "playground")
           ("w" "~/work/"              "Work")
           ("n" "~/nixos-config/"      "NixOs"))))
#+end_src
** Spelling
*** Set Dictionary
#+begin_src emacs-lisp :tangle yes
(setq ispell-dictionary "en_GB")
#+end_src
* Explore
** Larceny
 * https://www.youtube.com/watch?v=cLa96bUPR_I
 * [[https://joshblais.com/posts/my-literate-doom-emacs-config/][My Literate Doom Emacs Configuration Â·]]
** Packages
- https://github.com/bling/fzf.el
- https://github.com/jschaf/esup?tab=readme-ov-file
- https://github.com/jtmoulia/elisp-koans
