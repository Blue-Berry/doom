;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;; Don't edit this file, this is generated by config.org

(setq doom-theme 'doom-one)

(setq display-line-numbers-type `relative)

(use-package evil-owl
  :diminish ""
  :config
  (setq evil-owl-idle-delay 0.3)
  (setq evil-owl-max-string-length 500)
  (add-to-list 'display-buffer-alist
               '("*evil-owl*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (window-height . 20)))
  (evil-owl-mode))

(global-prettify-symbols-mode)

(setq which-key-idle-delay 0.2)
(setq which-key-idle-secondary-delay 0.1)

(after! org
  (global-org-modern-mode))

(setq org-hide-emphasis-markers t)  ;; hides *bold* / /italic/ markers

(setq org-directory "~/org/")

(remove-hook 'tuareg-mode-local-vars-hook #'opam-switch-mode)

(use-package ocaml-eglot
  :ensure t
  :after tuareg
  :hook
  (tuareg-mode . ocaml-eglot)
  (ocaml-eglot . eglot-ensure)
  (ocaml-eglot . (lambda () (add-hook #'before-save-hook #'eglot-format nil t))))

(after! eglot
  (add-to-list 'eglot-server-programs
               '(tuareg-mode . ("ocamllsp")))
  (setq-default eglot-workspace-configuration
                '(:ocamllsp (:codelens t :inlayHints (:hintPatternVariables t :hintLetBindings t :hintFunctionParams t)))
                ))

;; nil-ls
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "nil")
                    :activation-fn (lsp-activate-on "nix")
                    :priority 1
                    :multi-root t
                    :server-id 'nil-ls))

  ;; nixd
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "nixd")
                    :activation-fn (lsp-activate-on "nix")
                    :priority 0
                    :multi-root t
                    :add-on? t
                    :server-id 'nixd-lsp)))

(add-hook 'nix-mode-hook
  (lambda ()
    ;; Allow manually registered LSP clients to load
    (setq-local lsp-client-packages nil)))

(after! lsp-mode
  (defun my/enable-nixd-inlay-hints ()
    (when (eq (lsp--client-server-id (lsp--workspace-client lsp--cur-workspace))
              'nixd-lsp)
      (setq-local lsp-inlay-hint-enable t)
      (lsp-inlay-hints-mode 1)))
  (add-hook 'lsp-after-initialize-hook #'my/enable-nixd-inlay-hints))

(after! dirvish
  (setq! dirvish-quick-access-entries
         `(("h" "~/"                   "Home")
           ("e" ,user-emacs-directory  "Emacs user directory")
           ("p" "~/playground/"        "playground")
           ("w" "~/work/"              "Work"))))
